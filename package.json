{
  "name": "swig-napi-example-project",
  "version": "1.0.0",
  "description": "Example template for using SWIG Node-API for a dual-build Node.js/native + Browser/WASM project",
  "type": "module",
  "main": "./lib/native.cjs",
  "exports": {
    ".": {
      "types": "./lib/index.d.cts",
      "require": "./lib/native.cjs"
    },
    "./wasm": {
      "types": "./wasm/index.d.mts",
      "import": "./wasm/index.mjs"
    }
  },
  "scripts": {
    "test": "npm run test:nodejs && npm run test:browser",
    "test:nodejs": "npx mocha",
    "test:browser": "cd test/browser && npx webpack --mode=production && npx karma start ./karma.conf.cjs",
    "configure:native": "npx xpm run prepare --config native",
    "configure:wasm": "npx xpm run prepare --config wasm",
    "swig": "npx xpm run generate",
    "build:native": "npm run configure:native && npx xpm run build --config native",
    "build:wasm": "npm run configure:wasm && npx xpm run build --config wasm",
    "build:webpack": "cd test/browser && npx webpack --mode=production",
    "build": "npm run build:native && npm run build:wasm",
    "lint": "clang-format -i src/*.cc src/*.h && eslint test",
    "prepare": "node -e \"console.log('\\x1b[32m', 'Run \\\"npx xpm install\\\" to install the xpm toolchains' and \\\"npm run swig\\\" to generate the wrappers'\\x1b[0m');\"",
    "install": "node -e \"console.log('\\x1b[32m', 'Run \\\"npm run build\\\", \\\"npm run build:native\\\" or \\\"npm run build:wasm\\\" to build', '\\x1b[0m');\"",
    "dev": "cd test/browser && npx webpack serve --mode=production",
    "gcov": "mkdir -p coverage && cd coverage && gcov -o ../build/Debug/obj.target/example/build -o ../build/Debug/obj.target/example/src ../src/* ../build/*",
    "lcov": "npx c8 report --reporter=text-lcov > coverage/tests.lcov"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mmomtchev/swig-napi-example-project.git"
  },
  "keywords": [
    "swig",
    "node-api",
    "napi",
    "wasm",
    "xpack"
  ],
  "author": "Momtchil Momtchev <momtchil@momtchev.com>",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mmomtchev/swig-napi-example-project/issues"
  },
  "homepage": "https://github.com/mmomtchev/swig-napi-example-project#readme",
  "dependencies": {
    "@emnapi/runtime": "^1.0.0",
    "emnapi": "^1.0.0",
    "node-addon-api": "^7.1.0",
    "node-gyp": "^10.0.1",
    "tar": "^6.2.0",
    "xpm": "^0.19.0"
  },
  "devDependencies": {
    "@types/chai": "^4.3.12",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.11.24",
    "@types/tar": "^6.1.11",
    "@typescript-eslint/eslint-plugin": "^7.1.1",
    "@typescript-eslint/parser": "^7.1.1",
    "c8": "^9.1.0",
    "chai": "^5.1.0",
    "eslint": "^8.57.0",
    "eslint-plugin-mocha": "^10.3.0",
    "karma": "^6.4.3",
    "karma-chrome-launcher": "^3.2.0",
    "karma-mocha": "^2.0.1",
    "karma-verbose-reporter": "^0.0.8",
    "mocha": "^10.3.0",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3",
    "webpack": "^5.90.3",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.2"
  },
  "xpack": {
    "minimumXpmRequired": "0.14.0",
    "dependencies": {},
    "devDependencies": {
      "@xpack-dev-tools/meson-build": "0.60.3-1.1",
      "@xpack-dev-tools/ninja-build": "1.11.0-1.1",
      "@xpack-dev-tools/clang": "17.0.6-1.1"
    },
    "properties": {
      "name": "example",
      "buildFolderRelativePath": "{{ 'build' | path_join: configuration.name | to_filename | downcase }}",
      "commandDownloadEnvironment": "node hadron/hadron-download-headers",
      "commandInit": "mkdir -p build",
      "commandGenerate": "swig-jse -javascript -napi -typescript -c++ -outdir build -exports './{{ properties.name }}.node' -o build{{ path.sep }}{{ properties.name }}_wrap.cc src{{ path.sep }}{{ properties.name }}.i",
      "commandPrepare": "meson setup --backend ninja --buildtype {{ properties.buildType }} {{ properties.buildFolderRelativePath }} . --native-file hadron{{ path.sep }}global.ini",
      "commandPrepareNative": "{{ properties.commandPrepare }} --native-file build/napi.ini --native-file hadron{{ path.sep }}{{ properties.toolchain }}.ini --native-file hadron{{ path.sep }}{{ os.platform }}.ini --native-file hadron{{ path.sep }}{{ properties.toolchain }}-{{ os.platform }}.ini {{ env.HADRON_OPTS }}",
      "commandPrepareCross": "{{ properties.commandPrepare }} --cross-file build/napi.ini --cross-file hadron{{ path.sep }}{{ properties.toolchain }}.ini {{ env.HADRON_OPTS }}",
      "commandConfigure": "meson configure {{ properties.buildFolderRelativePath }}",
      "commandReconfigure": "meson setup --reconfigure {{ properties.buildFolderRelativePath }} .",
      "commandBuild": "meson compile -C {{ properties.buildFolderRelativePath }} -v",
      "commandInstall": "meson install -C {{ properties.buildFolderRelativePath }} --destdir ..{{ path.sep }}..{{ path.sep }}lib{{ path.sep }}binding",
      "commandClean": "meson compile -C {{ properties.buildFolderRelativePath }} --clean"
    },
    "actions": {
      "generate": [
        "{{ properties.commandInit }}",
        "{{ properties.commandGenerate }}"
      ]
    },
    "buildConfigurations": {
      "system": {
        "properties": {
          "buildType": "release",
          "toolchain": "system"
        },
        "actions": {
          "prepare": [
            "{{ properties.commandDownloadEnvironment }}",
            "{{ properties.commandPrepareNative }}"
          ],
          "configure": "{{ properties.commandConfigure }}",
          "build": [
            "{{ properties.commandBuild }}",
            "{{ properties.commandInstall }}"
          ],
          "clean": "{{ properties.commandClean }}"
        }
      },
      "native": {
        "inherit": [
          "system"
        ],
        "properties": {
          "buildType": "release",
          "toolchain": "clang"
        }
      },
      "wasm": {
        "inherit": [
          "system"
        ],
        "properties": {
          "buildType": "release",
          "toolchain": "emscripten"
        },
        "actions": {
          "prepare": [
            "{{ properties.commandDownloadEnvironment }}",
            "{{ properties.commandPrepareCross }}"
          ]
        }
      },
      "native-debug": {
        "inherit": [
          "native"
        ],
        "properties": {
          "buildType": "debug"
        }
      },
      "wasm-debug": {
        "inherit": [
          "wasm"
        ],
        "properties": {
          "buildType": "debug"
        }
      }
    }
  }
}
